// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var ChoiceView, ChoicesView, PollView, PollsView;
    PollsView = (function(_super) {

      __extends(PollsView, _super);

      function PollsView() {
        return PollsView.__super__.constructor.apply(this, arguments);
      }

      PollsView.prototype.el = $('div#polls');

      PollsView.prototype.events = {
        'click button#add_poll': 'addPoll'
      };

      PollsView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new Polls();
        this.collection.bind('add', this.appendPoll);
        return this.render();
      };

      PollsView.prototype.render = function() {
        var self;
        self = this;
        return this.collection.fetch({
          success: function() {
            var poll, _i, _len, _ref, _results;
            _ref = self.collection.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              poll = _ref[_i];
              _results.push(self.appendPoll(poll));
            }
            return _results;
          },
          error: function() {
            return alert("An error occurred while attempting to fetch Polls Collection.");
          }
        });
      };

      PollsView.prototype.addPoll = function() {
        var poll, poll_pub_date, poll_question, self;
        poll_question = $("#poll_question").val();
        poll_pub_date = $("#poll_pub_date").val();
        poll = new Poll();
        poll.set({
          question: poll_question,
          pub_date: poll_pub_date
        });
        self = this;
        return poll.save({}, {
          success: function(model) {
            return self.collection.add(model);
          },
          error: function(model, response) {
            var error;
            error = "There was an error trying to save a poll.\nResponse: " + response.responseText;
            return alert(error);
          }
        });
      };

      PollsView.prototype.appendPoll = function(poll) {
        var pollView;
        pollView = new PollView({
          model: poll
        });
        return $('ul#polls', this.el).append(pollView.render().el);
      };

      return PollsView;

    })(Backbone.View);
    PollView = (function(_super) {

      __extends(PollView, _super);

      function PollView() {
        return PollView.__super__.constructor.apply(this, arguments);
      }

      PollView.prototype.tagName = 'li';

      PollView.prototype.events = {
        'click button.delete_poll': 'remove'
      };

      PollView.prototype.render = function() {
        $(this.el).append("<span>" + (this.model.get('question')) + "</span>");
        $(this.el).append("&nbsp; <button class='delete_poll'>Delete</button>");
        $(this.el).append("<div id='poll_" + (this.model.get('id')) + "_choices'></div>");
        this.el.choices = new ChoicesView(this.model);
        return this;
      };

      PollView.prototype.remove = function() {
        var self;
        self = this;
        return this.model.destroy({
          success: function() {
            return $(self.el).remove();
          },
          error: function() {
            return alert("There was an error trying to delete the poll.");
          }
        });
      };

      return PollView;

    })(Backbone.View);
    ChoicesView = (function(_super) {

      __extends(ChoicesView, _super);

      function ChoicesView() {
        return ChoicesView.__super__.constructor.apply(this, arguments);
      }

      ChoicesView.prototype.initialize = function(poll) {
        _.bindAll(this);
        this.poll = "/api/v1/polls/" + (poll.get('id')) + "/";
        this.el = "div#poll_" + (poll.get('id')) + "_choices";
        this.collection = new Choices({
          poll: this.poll
        });
        this.collection.bind('add', this.appendChoice);
        return this.render(poll);
      };

      ChoicesView.prototype.render = function(poll) {
        var self;
        self = this;
        return this.collection.fetch({
          success: function() {
            var choice, _i, _len, _ref, _results;
            self.renderTemplate(poll);
            _ref = self.collection.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              choice = _ref[_i];
              if (choice.get('poll') === self.poll) {
                _results.push(self.appendChoice(choice));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          },
          error: function() {
            return alert("An error occurred while attempting to fetch Choices Collection.");
          }
        });
      };

      ChoicesView.prototype.renderTemplate = function(poll) {
        var self, template, variables;
        variables = {
          poll_id: poll.get('id')
        };
        template = _.template($("#choices_template").html(), variables);
        $(this.el).append(template);
        self = this;
        return $("button#add_choice_poll_" + poll.id).click(function() {
          return self.addChoice(poll);
        });
      };

      ChoicesView.prototype.appendChoice = function(choice) {
        var choiceView;
        choiceView = new ChoiceView({
          model: choice
        });
        return $('ul#choices', this.el).append(choiceView.render().el);
      };

      ChoicesView.prototype.addChoice = function(poll) {
        var choice, choice_choice, choice_votes, self;
        choice_choice = $("#choice_name_poll_" + (poll.get('id'))).val();
        choice_votes = $("#choice_votes_poll_" + (poll.get('id'))).val();
        choice = new Choice();
        choice.set({
          choice: choice_choice,
          votes: parseInt(choice_votes),
          poll: poll.get('resource_uri')
        });
        self = this;
        return choice.save({}, {
          success: function() {
            return self.collection.add(choice);
          },
          error: function(model, response) {
            var error;
            console.log(response);
            error = "There was an error trying to save a choice.\nResponse: " + response.responseText.error_message;
            return alert(error);
          }
        });
      };

      return ChoicesView;

    })(Backbone.View);
    ChoiceView = (function(_super) {

      __extends(ChoiceView, _super);

      function ChoiceView() {
        return ChoiceView.__super__.constructor.apply(this, arguments);
      }

      ChoiceView.prototype.tagName = 'li';

      ChoiceView.prototype.events = {
        'click button.delete_choice': 'remove',
        'click button.vote_choice': 'vote'
      };

      ChoiceView.prototype.initialize = function() {
        _.bindAll(this);
        return this.model.bind('change', this.render);
      };

      ChoiceView.prototype.render = function() {
        var choice_name, choice_votes, delete_button, vote_button;
        choice_name = "<span>" + (this.model.get('choice')) + "</span>";
        choice_votes = "&nbsp;<span>Votes: " + (this.model.get('votes')) + "</span>";
        vote_button = "&nbsp; <button class='vote_choice'>Vote</button>";
        delete_button = "&nbsp; <button class='delete_choice'>Delete</button>";
        $(this.el).html(choice_name + choice_votes + vote_button + delete_button);
        return this;
      };

      ChoiceView.prototype.remove = function() {
        var self;
        self = this;
        return this.model.destroy({
          success: function() {
            return $(self.el).remove();
          },
          error: function() {
            return alert("There was an error trying to delete the choice.");
          }
        });
      };

      ChoiceView.prototype.vote = function() {
        var votes;
        votes = this.model.get('votes');
        votes++;
        this.model.set({
          votes: votes
        });
        return this.model.save({
          success: function() {
            return console.log("vote");
          },
          error: function() {
            return alert("There was an error while trying to vote for a choice.");
          }
        });
      };

      return ChoiceView;

    })(Backbone.View);
    return new PollsView();
  });

}).call(this);
