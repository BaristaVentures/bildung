// Generated by CoffeeScript 1.3.3
(function() {
  var Comment, Comments,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Comment = (function(_super) {

    __extends(Comment, _super);

    function Comment() {
      return Comment.__super__.constructor.apply(this, arguments);
    }

    Comment.prototype.urlRoot = "/api/v1/comments/";

    return Comment;

  })(Backbone.Model);

  Comments = (function(_super) {

    __extends(Comments, _super);

    function Comments() {
      return Comments.__super__.constructor.apply(this, arguments);
    }

    Comments.prototype.model = Comment;

    Comments.prototype.url = "/api/v1/comments/";

    Comments.prototype.parse = function(data) {
      return data.objects;
    };

    return Comments;

  })(Backbone.Collection);

  jQuery(function() {
    var CommentView, CommentsView;
    CommentsView = (function(_super) {

      __extends(CommentsView, _super);

      function CommentsView() {
        return CommentsView.__super__.constructor.apply(this, arguments);
      }

      CommentsView.prototype.el = $('div#comments');

      CommentsView.prototype.events = {
        "click button#create_comment": "createComment"
      };

      CommentsView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new Comments();
        this.collection.bind("add", this.appendComment);
        return this.render();
      };

      CommentsView.prototype.render = function() {
        return this.readComments();
      };

      CommentsView.prototype.appendComment = function(comment) {
        var commentView;
        commentView = new CommentView({
          model: comment
        });
        return $(this.el).append(commentView.render().el);
      };

      CommentsView.prototype.createComment = function() {
        var comment, comment_author, comment_comment, comment_poll, self;
        comment_author = $('input#author').val();
        comment_comment = $('textarea#comment').val();
        comment_poll = "/api/v1/polls/" + ($('input#poll').val()) + "/";
        comment = new Comment();
        comment.set({
          author: comment_author,
          comment: comment_comment,
          pub_date: new Date(),
          poll: comment_poll
        });
        self = this;
        return comment.save({}, {
          success: function() {
            self.collection.add(comment);
            $('input#author').val('');
            return $('textarea#comment').val('');
          },
          error: function() {
            return alert("An error occurred while attempting to create a Comment.");
          }
        });
      };

      CommentsView.prototype.readComments = function() {
        var self;
        self = this;
        return this.collection.fetch({
          success: function() {
            var comment, _i, _len, _ref, _results;
            _ref = self.collection.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              comment = _ref[_i];
              _results.push(self.appendComment(comment));
            }
            return _results;
          },
          error: function() {
            return alert("An error occurred while attempting to fetch Comments Collection.");
          }
        });
      };

      return CommentsView;

    })(Backbone.View);
    CommentView = (function(_super) {

      __extends(CommentView, _super);

      function CommentView() {
        return CommentView.__super__.constructor.apply(this, arguments);
      }

      CommentView.prototype.initialize = function() {
        return _.bindAll(this);
      };

      CommentView.prototype.render = function() {
        this.renderTemplate();
        return this;
      };

      CommentView.prototype.renderTemplate = function() {
        var template, variables;
        variables = {
          comment: this.model
        };
        template = _.template($("script#comments_template").html(), variables);
        return $('div#comments_items').append(template);
      };

      return CommentView;

    })(Backbone.View);
    return new CommentsView();
  });

}).call(this);
